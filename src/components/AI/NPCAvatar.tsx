import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '../ui/button';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface NPCAvatarProps {
  isVisible: boolean;
  onClose: () => void;
}

const NPCAvatar = ({ isVisible, onClose }: NPCAvatarProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh kh√°m ph√° v≈© tr·ª•! T√¥i l√† AI Navigator, s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t√¨m hi·ªÉu v·ªÅ portfolio n√†y. B·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ ch·ªß nh√¢n c·ªßa phi thuy·ªÅn n√†y?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setIsTyping(true);

    try {
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'Space Portfolio AI Navigator'
        },
        body: JSON.stringify({
          model: 'openai/gpt-4o',
          messages: [
            {
              role: 'system',
              content: `B·∫°n l√† AI Navigator - m·ªôt tr√≠ tu·ªá nh√¢n t·∫°o th√¢n thi·ªán v√† hi·ªÉu bi·∫øt, ƒë√≥ng vai tr√≤ l√† h∆∞·ªõng d·∫´n vi√™n trong m·ªôt portfolio 3D v≈© tr·ª• t∆∞∆°ng t√°c. 

NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
- Gi·ªõi thi·ªáu v·ªÅ portfolio ch·ªß nh√¢n (m·ªôt developer t√†i nƒÉng chuy√™n v·ªÅ 3D web development)
- H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng kh√°m ph√° c√°c h√†nh tinh kh√°c nhau (Projects, Skills, Timeline, Contact)
- Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ k·ªπ nƒÉng l·∫≠p tr√¨nh, d·ª± √°n, v√† kinh nghi·ªám
- T·∫°o kh√¥ng kh√≠ th√¢n thi·ªán, chuy√™n nghi·ªáp nh∆∞ng vui v·∫ª

PHONG C√ÅCH GIAO TI·∫æP:
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán
- Th·ªânh tho·∫£ng s·ª≠ d·ª•ng thu·∫≠t ng·ªØ v≈© tr·ª• (phi thuy·ªÅn, h√†nh tinh, thi√™n h√†, etc.)
- Ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
- Khuy·∫øn kh√≠ch kh√°m ph√° c√°c ph·∫ßn kh√°c c·ªßa portfolio

TH√îNG TIN PORTFOLIO:
- Chuy√™n m√¥n: React, Three.js, TypeScript, WebGL, 3D Web Development
- D·ª± √°n n·ªïi b·∫≠t: Cosmic Web Platform, Nebula UI Library
- K·ªπ nƒÉng: Frontend (React, TypeScript, Three.js), 3D & Animation (Three.js, Blender, GSAP), Backend (Node.js, Python)
- Kinh nghi·ªám: Senior Frontend Developer v·ªõi focus v√†o 3D experiences

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch!`
            },
            ...messages.map(msg => ({
              role: msg.role,
              content: msg.content
            })),
            {
              role: 'user',
              content: inputMessage
            }
          ],
          temperature: 0.7,
          max_tokens: 300
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y. H√£y th·ª≠ l·∫°i sau!';

      // Simulate typing effect
      setTimeout(() => {
        setIsTyping(false);
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: aiResponse,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, assistantMessage]);
      }, 1000 + Math.random() * 1000);

    } catch (error) {
      console.error('Error calling OpenRouter API:', error);
      setIsTyping(false);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const quickQuestions = [
    "K·ªÉ v·ªÅ d·ª± √°n n·ªïi b·∫≠t nh·∫•t",
    "K·ªπ nƒÉng 3D development nh∆∞ th·∫ø n√†o?",
    "Kinh nghi·ªám l√†m vi·ªác ra sao?",
    "L√†m sao li√™n h·ªá ƒë∆∞·ª£c?"
  ];

  return (
    <AnimatePresence>
      {isVisible && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
            onClick={onClose}
          />

          {/* Chat Interface */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8, y: 50 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 50 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90vw] max-w-md h-[70vh] bg-card/95 backdrop-blur-md border border-border rounded-2xl shadow-cosmic z-50 flex flex-col overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-border bg-gradient-to-r from-primary/10 to-accent/10">
              <div className="flex items-center gap-3">
                <div className="relative">
                  <div className="w-10 h-10 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
                      className="text-lg"
                    >
                      ü§ñ
                    </motion.div>
                  </div>
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 2, repeat: Infinity }}
                    className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full"
                  />
                </div>
                <div>
                  <h3 className="font-semibold text-foreground">AI Navigator</h3>
                  <p className="text-xs text-muted-foreground">H∆∞·ªõng d·∫´n vi√™n v≈© tr·ª•</p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={onClose}
                className="text-muted-foreground hover:text-foreground"
              >
                ‚úï
              </Button>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-3 rounded-2xl ${
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground ml-4'
                        : 'bg-muted text-muted-foreground mr-4'
                    }`}
                  >
                    <p className="text-sm leading-relaxed">{message.content}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>
                </motion.div>
              ))}

              {/* Typing indicator */}
              {isTyping && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex justify-start"
                >
                  <div className="bg-muted text-muted-foreground p-3 rounded-2xl mr-4">
                    <div className="flex space-x-1">
                      <motion.div
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                        className="w-2 h-2 bg-current rounded-full opacity-60"
                      />
                      <motion.div
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                        className="w-2 h-2 bg-current rounded-full opacity-60"
                      />
                      <motion.div
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                        className="w-2 h-2 bg-current rounded-full opacity-60"
                      />
                    </div>
                  </div>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Quick Questions */}
            {messages.length <= 2 && (
              <div className="px-4 pb-2">
                <p className="text-xs text-muted-foreground mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
                <div className="flex flex-wrap gap-2">
                  {quickQuestions.map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => setInputMessage(question)}
                      className="text-xs h-7 px-2 border-primary/20 hover:border-primary/40"
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Input */}
            <div className="p-4 border-t border-border bg-background/50">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                  className="flex-1 px-3 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary"
                  disabled={isLoading}
                />
                <Button
                  onClick={sendMessage}
                  disabled={!inputMessage.trim() || isLoading}
                  size="sm"
                  className="px-4"
                >
                  {isLoading ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="w-4 h-4 border-2 border-current border-t-transparent rounded-full"
                    />
                  ) : (
                    'üöÄ'
                  )}
                </Button>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default NPCAvatar;
